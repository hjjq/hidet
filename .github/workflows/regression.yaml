name: Regression

on:
  workflow_dispatch:
    inputs:
      hardware_config:
        description: 'Hardware Configuration ID(s), comma separated'
        required: true
        default: '2'


jobs:
  start_instances:
    runs-on: ubuntu-latest
    outputs:
      started_instances: ${{ steps.run_py_script.outputs.started_instances }}
      hw_configs: ${{ steps.run_py_script.outputs.hw_configs }}
    steps:
      - uses: actions/checkout@v4
      - run: pip install mysql-connector-python
      - id: run_py_script
        run: timeout 900 python ./.github/scripts/start_instances.py
        env:
          HW_CONFIG: ${{ inputs.hardware_config }}
          CI_DB_HOSTNAME: ${{ secrets.CI_DB_HOSTNAME }}
          CI_DB_PORT: ${{ secrets.CI_DB_PORT }}
          CI_DB_USERNAME: ${{ secrets.CI_DB_USERNAME }}
          CI_DB_PASSWORD: ${{ secrets.CI_DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

  run_tests:
    needs: start_instances
    strategy:
      matrix:
        hw_configs: ${{ fromJSON(needs.start_instances.outputs.hw_configs) }}
    runs-on: ${{ matrix.hw_configs }}
    container:
      image: nvcr.io/nvidia/pytorch:23.10-py3
      options: --gpus all
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies via pip
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Build hidet
        run: |
          bash ./scripts/wheel/build_wheel.sh
          WHEEL=$(find ./scripts/wheel/built_wheel -maxdepth 1 -name '*.whl')
          echo "WHEEL_NAME=$WHEEL" >> $GITHUB_ENV
          echo "Built wheel: ${{ env.WHEEL_NAME }}"

      - name: Install hidet
        run: |
          pip install --no-deps --force-reinstall ${{ env.WHEEL_NAME }}
      
      - name: Run benchmarks
        run: |
          python ./.github/scripts/benchmark.py


  # stop_instances:
  #   runs-on: ubuntu-latest
  #   needs: run_tests
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: python ./.github/scripts/stop_instances.py
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: us-east-1
  #         STARTED_INSTANCES: ${{ needs.start_instances.outputs.started_instances }}